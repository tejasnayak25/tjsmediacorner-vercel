import{initializeApp}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js";import{getAnalytics}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-analytics.js";import{getAuth,deleteUser,updateProfile,sendPasswordResetEmail}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-auth.js";import{ref,getStorage,uploadBytes,getDownloadURL,listAll,deleteObject}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-storage.js";import{getFirestore,collection,doc,getDoc,getDocs,query,deleteDoc}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-firestore.js";const firebaseConfig={apiKey:"AIzaSyApnRlgC2Gs5r8VjIE4BmjwmwGU9Fm0ZfQ",authDomain:"tjsmediacorner.firebaseapp.com",projectId:"tjsmediacorner",storageBucket:"tjsmediacorner.appspot.com",messagingSenderId:"1062875689510",appId:"1:1062875689510:web:85316c405458e37a1cace7",measurementId:"G-BPTP2W4DMH"};const app=initializeApp(firebaseConfig);const analytics=getAnalytics(app);const auth=getAuth();const storage=getStorage();const firestore=getFirestore();const membershipCollection=collection(firestore,"memberships");if(location.pathname.startsWith("/apps/")){let appid=location.pathname.split("/").pop();if(appid==="")window.open(location.origin+"/apps","_self");getDoc(doc(firestore,"apps",appid)).then((d=>{d={id:d.id,...d.data()};document.getElementById("name").innerText=d.name;document.getElementById("description").innerText=d.description;document.getElementById("logo").src=d.logo;document.getElementById("meta-logo").content=d.logo;document.getElementById("meta-title").content=d.name;document.getElementById("meta-description").content=d.description;if(d.features.length>0){let fHolder=document.getElementById("features");fHolder.innerHTML="";d.features.forEach((f=>{let p=document.createElement("p");p.className="p-2 flex gap-3 items-center";p.innerHTML=`\n                <i class=" fi fi-sr-check text-green-400"></i>\n                <p>${f}</p>\n                `;fHolder.append(p)}))}if(d.screenshots&&d.screenshots.length>0){document.getElementById("no-screenshots").classList.add("hidden");let ssholder=document.getElementById("screenshots-holder");ssholder.classList.replace("hidden","flex");d.screenshots.forEach((f=>{let img=document.createElement("img");img.className="w-[95%] md:max-h-80 max-h-56 rounded-lg object-cover";img.src=f;ssholder.append(img)}))}let url=`${location.origin}/apps/${appid}`;document.querySelectorAll("#share-app").forEach((b=>{b.onclick=()=>{navigator.share({title:d.name,text:`\n                    ${d.description}\n${d.features.length>0?`\nFeatures: \n${d.features.map((i=>`âœ… ${i}`)).join("\n")}    \n`:""}\nInstall:\n${url}\n                    `})}}));document.querySelectorAll("#install-app").forEach((b=>{b.onclick=()=>{window.open(d.url,"_blank")}}))}))}else{let pfp=document.getElementById("pfp-image");let name=document.getElementById("display-name");let email=document.getElementById("email");let pfpInput=document.getElementById("profile-picture");let pfpBtn=document.getElementById("pfp-upload-icon");let deleteBtn=document.getElementById("delete-btn");let updateBtn=document.getElementById("update-btn");let pfpLoading=document.getElementById("pfp-loading");let logoutBtn=document.getElementById("logout-btn");let resetPassBtn=document.getElementById("password-reset-btn");let noSubscription=document.getElementById("no-subscriptions");let subscriptionsHolder=document.getElementById("subscriptions-holder");let tokens=document.getElementById("tokens");let photo=null,isSystem=false;auth.onAuthStateChanged((async user=>{if(!user){window.location.href="/login"}else{pfp.src=user.photoURL;name.value=user.displayName;email.innerText=user.email;if(!user.photoURL){let avatarId=email.innerText.split("@")[0];let res=await fetch(`https://api.multiavatar.com/${avatarId}.png`);let blob=await res.blob();photo=blob;let url=URL.createObjectURL(blob);pfp.src=url}if(!user.displayName){name.value=user.email.split("@")[0]}pfpBtn.onclick=()=>{pfpInput.click()};pfpInput.onchange=e=>{let file=e.target.files[0];let url=URL.createObjectURL(file);pfp.src=url;photo=file};updateBtn.onclick=async()=>{if(updateBtn.innerText==="Edit Profile"){updateBtn.innerText="Update";document.getElementById("pfp-upload").classList.replace("hidden","flex");name.removeAttribute("readonly");name.classList.add("border-2");return}let path="";if(photo){document.getElementById("pfp-upload-icon").classList.add("hidden");pfpLoading.classList.remove("hidden");photo=await compressImage(photo,"image/png");if(!photo){alertwindow.message="Failed to process the profile picture!";alertwindow.btns=[];alertwindow.show();return}await new Promise(((resolve,reject)=>{let picName="profile.png";var storageRef=ref(storage,user.uid+"/profilePicture/"+picName);const metadata={contentType:photo.type};uploadBytes(storageRef,photo,metadata).then((snapshot=>{getDownloadURL(snapshot.ref).then((downloadURL=>{path=downloadURL;resolve()}))})).catch((err=>{console.log(err)})).finally((()=>{document.getElementById("pfp-upload-icon").classList.add("hidden");pfpLoading.classList.add("hidden")}))}))}updateProfile(auth.currentUser,{displayName:name.value,photoURL:photo?path:user.photoURL}).then((()=>{if(!isSystem){alertwindow.message="Profile updated successfully!";alertwindow.btns=[];alertwindow.show()}else{isSystem=false}photo=null})).catch((error=>{if(!isSystem){alertwindow.message="Profile update failed!";alertwindow.btns=[];alertwindow.show()}else{isSystem=false}})).finally((()=>{document.getElementById("pfp-upload").classList.replace("flex","hidden");document.getElementById("pfp-upload-icon").classList.remove("hidden");pfpLoading.classList.add("hidden");name.setAttribute("readonly","readonly");name.classList.remove("border-2");updateBtn.innerText="Edit Profile"}))};deleteBtn.onclick=()=>{let proceedBtn=document.createElement("button");proceedBtn.className="btn btn-error rounded-full px-10";proceedBtn.innerText="Proceed";proceedBtn.onclick=async()=>{try{let userdoc=doc(firestore,"users",user.email);await deleteDoc(userdoc);const storageRef=ref(storage,user.uid+"/profilePicture");listAll(storageRef).then((listResults=>{const promises=listResults.items.map((item=>deleteObject(item)));Promise.all(promises).then((()=>{deleteUser(auth.currentUser).then((()=>{window.location.href="/login"})).catch((error=>{console.log(error)}))}))}))}catch(e){console.log(e)}};alertwindow.message="Are you sure you want to delete your account?\nNote: This is an irreversible action!";alertwindow.btns=[proceedBtn];alertwindow.show()};logoutBtn.onclick=()=>{auth.signOut().then((()=>{window.location.href="/login"}))};document.querySelector(".nav-active #logout-btn-2").onclick=()=>{auth.signOut().then((()=>{window.location.href="/login"}))};resetPassBtn.onclick=async()=>{try{await sendPasswordResetEmail(auth,user.email);alertwindow.message="Email has been sent";alertwindow.btns=[];alertwindow.show()}catch(e){console.log(e);alertwindow.message="There was an error while sending email. Kindly try again later.";alertwindow.btns=[];alertwindow.show()}};if(!user.displayName||!user.photoURL){isSystem=true;updateBtn.click()}let memberships=await getDocs(query(membershipCollection));memberships=memberships.docs.map((item=>({id:item.id,data:item.data()})));let userdoc=doc(firestore,"users",user.email);const docSnap=await getDoc(userdoc);if(docSnap.exists()){let data=docSnap.data();let subscriptions=data.subscriptions;tokens.innerText=data.tokens;let subapps=memberships.filter((item=>subscriptions.includes(item.id)&&item.id!=="Free"));if(subapps.length>0){let text="";for(const app of subapps){text+=`${app.data.url?`<a href="${app.data.url}">`:""}<img title="${app.id}" src="${app.data.image}" class="w-16 aspect-square rounded-full object-cover cursor-pointer hover:border-2 border-0 transition-all border-spacing-1 border-yellow-500 p-1" alt="${app.id}">${app.data.url?"</a>":""}`}noSubscription.classList.add("hidden");subscriptionsHolder.innerHTML=text;subscriptionsHolder.classList.replace("hidden","flex")}}else{console.log("No such document!")}}}))}async function compressImage(file,type){const options={maxSizeMB:.5,maxWidthOrHeight:512,useWebWorker:true,fileType:type??file.type};try{const compressedFile=await imageCompression(file,options);return compressedFile}catch(error){console.error("Compression failed:",error);return null}}