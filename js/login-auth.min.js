import{initializeApp}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js";import{getAuth,createUserWithEmailAndPassword,sendEmailVerification,setPersistence,browserLocalPersistence,GoogleAuthProvider,signInWithPopup,signInWithEmailAndPassword,sendPasswordResetEmail,getIdToken}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-auth.js";import{getFirestore,doc,setDoc,getDoc}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-firestore.js";const firebaseConfig={apiKey:"AIzaSyApnRlgC2Gs5r8VjIE4BmjwmwGU9Fm0ZfQ",authDomain:"tjsmediacorner.firebaseapp.com",projectId:"tjsmediacorner",storageBucket:"tjsmediacorner.appspot.com",messagingSenderId:"1062875689510",appId:"1:1062875689510:web:85316c405458e37a1cace7",measurementId:"G-BPTP2W4DMH"};const app=initializeApp(firebaseConfig);const auth=getAuth();const firestore=getFirestore();let email=document.getElementById("email");let password=document.getElementById("password");let authBtn=document.getElementById("auth-btn");let googleBtn=document.getElementById("google-btn");let listener=null;let mode=window.location.pathname.substring(1);let params=new URLSearchParams(window.location.search);let callback_url=null;if(params.has("email")){email.value=params.get("email")}if(params.has("callback_url")){let data=params.get("callback_url");callback_url=decodeURIComponent(data);if(mode==="login"||mode==="signup"){let anchor=document.getElementById("alternative-link");let url=new URL(anchor.href);url.searchParams.set("callback_url",data);anchor.href=url.href}}listener=auth.onAuthStateChanged((async user=>{if(!user){listener()}else{if(callback_url){const uid=user.uid;const idToken=await getIdToken(user);const response=await fetch("/generateCustomToken",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${idToken}`},body:JSON.stringify({uid:uid})});if(response.ok){const data=await response.json();const customToken=data.token;const redirectUrl=new URL(callback_url);redirectUrl.searchParams.set("token",customToken);window.location.href=redirectUrl.toString()}else{alertwindow.message="Failed to generate token";alertwindow.show()}}else{window.location.href="/account"}}}));setPersistence(auth,browserLocalPersistence).then((()=>{authBtn.onclick=async()=>{if(mode==="login"){if(email.value!==""&&password.value!==""){signInWithEmailAndPassword(auth,email.value,password.value).then((async userCredential=>{if(callback_url){const user=userCredential.user;const uid=user.uid;const idToken=await getIdToken(user);const response=await fetch("/generateCustomToken",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${idToken}`},body:JSON.stringify({uid:uid})});if(response.ok){const data=await response.json();const customToken=data.token;const redirectUrl=new URL(callback_url);redirectUrl.searchParams.set("token",customToken);window.location.href=redirectUrl.toString()}else{alertwindow.message="Failed to generate token";alertwindow.show()}}else{window.location.href="/account"}})).catch((e=>{alertwindow.message="Bad Credentials";alertwindow.show()}))}}else if(mode==="signup"){if(email.value!==""&&password.value!==""){createUserWithEmailAndPassword(auth,email.value,password.value).then((async user=>{try{const docRef=doc(firestore,"users",email.value);await setDoc(docRef,{});let res=await sendEmailVerification(auth.currentUser);alertwindow.message="Verification email has been sent to email";alertwindow.onhide=()=>{window.location.href="/login"+(callback_url?`?callback_url=${encodeURIComponent(callback_url)}`:"")};alertwindow.show();auth.signOut()}catch(err){console.log(err)}})).catch((e=>{alertwindow.message="An account with the email already exists!";alertwindow.show()}))}}else if(mode==="forgot-password"){if(email.value!==""){try{await sendPasswordResetEmail(auth,email.value);alertwindow.message="Email has been sent";alertwindow.show()}catch(e){console.log(e);alertwindow.message="There was an error while sending email. Kindly try again later.";alertwindow.show()}}}};if(mode==="login"||mode==="signup"){googleBtn.onclick=async()=>{try{let result=await signInWithPopup(getAuth(),new GoogleAuthProvider);const docRef=doc(firestore,"users",result.user.email);const docSnap=await getDoc(docRef);if(docSnap.exists()){console.log("User exists!")}else{await setDoc(docRef,{})}if(callback_url){const user=result.user;const uid=user.uid;const idToken=await getIdToken(user);const response=await fetch("/generateCustomToken",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${idToken}`},body:JSON.stringify({uid:uid})});if(response.ok){const data=await response.json();const customToken=data.token;const redirectUrl=new URL(callback_url);redirectUrl.searchParams.set("token",customToken);window.location.href=redirectUrl.toString()}else{alertwindow.message="Failed to generate token";alertwindow.show()}}else{window.location.href="/account"}}catch(error){if(error.code==="auth/account-exists-with-different-credential"){let pendingCred=error.credential;alertwindow.message="An account with the email already exists!";alertwindow.show()}}}}}));